---
- name: "Home server config"
  hosts: "all"

  vars:
    user: "ryan"
    homedir: "/home/{{ user }}"
    src: "{{ homedir }}/home-stuff"

  tasks:
    - name: "Load external vars"
      ansible.builtin.include_vars:
        file: "vars.yaml"

    ################################################################################################
    ### Core requirements ##########################################################################
    ################################################################################################
    - name: "Install packages"
      become: true
      ansible.builtin.apt:
        pkg:
          - "apt-transport-https"
          - "ca-certificates"
          - "cockpit"
          - "curl"
          - "git"
          - "golang"
          - "gnupg2"
          - "htop"
          - "iptables"
          - "lsb-release"
          - "make"
          - "net-tools"
          - "nmap"
          - "qrencode"
          - "resolvconf"
          - "ripgrep"
          - "rlwrap"
          - "rsync"
          - "socat"
          - "tree"
          - "ufw"
          - "unzip"
          - "wireguard"
          - "zip"
          - "zsh"
        update_cache: true
        autoclean: true
        autoremove: true
        state: "present"

    - name: "Add user config for sudoers file"
      become: true
      ansible.builtin.copy:
        content: "{{ user }} ALL=(ALL) NOPASSWD:ALL"
        dest: "/etc/sudoers.d/{{ user }}"
        mode: "0600"

    - name: "Add user"
      become: true
      ansible.builtin.user:
        name: "{{ user }}"
        create_home: true
        shell: "/usr/bin/zsh"
        groups:
          - sudo
        append: true

    ################################################################################################
    ### Shell stuff ################################################################################
    ################################################################################################
    - name: "Install Oh My Zsh"
      become: true
      become_user: "{{ user }}"
      ansible.builtin.shell:
        cmd: 'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"'
        creates: "/home/{{ user }}/.oh-my-zsh"

    ################################################################################################
    ### Containerized services #####################################################################
    ################################################################################################
    - name: "Install Docker via root-user wrapper"
      become: true
      block:
        - name: "Install Docker"
          ansible.builtin.include_role:
            name: "geerlingguy.docker"
          vars:
            docker_users:
              - "{{ user }}"

    - name: "Copy source code directory to host"
      become: true
      become_user: "{{ user }}"
      ansible.builtin.copy:
        src: "../../config"
        dest: "{{ src }}"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: "preserve"

    - name: "Run Docker Compose stack"
      become: true
      become_user: "{{ user }}"
      community.docker.docker_compose_v2:
        state: "present"
        project_src: "{{ src }}/config"
        pull: "always"
        remove_orphans: true
        recreate: "always"
      register: docker_compose_output

    # We don't use the 'wait' key above because some containers might fail as expected (e.g. they're
    # work-in-progress), so give some time here instead to let the ones we know should be working
    # start successfully
    - name: "Give containers a chance to fully start"
      ansible.builtin.pause:
        seconds: 3

    - name: "Verify Docker Compose stack components are running"
      ansible.builtin.assert:
        that:
          - item.State == "running"
        quiet: true
      loop: "{{ docker_compose_output.containers }}"

    ################################################################################################
    ### Wireguard ##################################################################################
    ################################################################################################

    - name: "Create WireGuard keys"
      become: true
      ansible.builtin.shell:
        cmd: |
          mkdir -p /etc/wireguard/keys
          umask 077

          # Server
          if [ ! -f /etc/wireguard/keys/server.priv ] ; then
            wg genkey > /etc/wireguard/keys/server.priv
            wg pubkey < /etc/wireguard/keys/server.priv > /etc/wireguard/keys/server.pub
          fi

          # Clients
          {% for client in wireguard_clients %}
          if [ ! -f /etc/wireguard/keys/client_{{ client }}.priv ] ; then
            wg genkey > /etc/wireguard/keys/client_{{ client }}.priv
            wg pubkey < /etc/wireguard/keys/client_{{ client }}.priv > /etc/wireguard/keys/client_{{ client }}.pub
          fi
          {% endfor %}

          chmod -R 0600 /etc/wireguard/*

          touch /etc/wireguard/keys/ansible_made_this
        creates: "/etc/wireguard/keys/ansible_made_this"

    - name: "Get contents of WireGuard keys for later interpolation"
      become: true
      ansible.builtin.shell:
        executable: "/usr/bin/bash"
        cmd: |
          printf 'server_private_key:%s\n' "$(cat /etc/wireguard/keys/server.priv)"
          printf 'server_public_key:%s\n' "$(cat /etc/wireguard/keys/server.pub)"
          {% for client in wireguard_clients %}
          printf 'client_private_key_{{ client }}:%s\n' "$(cat /etc/wireguard/keys/client_{{ client }}.priv)"
          printf 'client_public_key_{{ client }}:%s\n' "$(cat /etc/wireguard/keys/client_{{ client }}.pub)"
          {% endfor %}
      register: "wg_keys_lines"

    - name: "Store key output as dict for easier reading/use"
      ansible.builtin.set_fact:
        wg_keys: "{{ dict(wg_keys_lines.stdout_lines | map('split', ':')) }}"

    - name: "Create WireGuard server config file"
      become: true
      ansible.builtin.copy:
        dest: "/etc/wireguard/wg0.conf"
        content: |
          [Interface]
          Address = 10.8.0.1/24
          ListenPort = 51820
          PrivateKey = {{ wg_keys['server_private_key'] }}
          PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o {{ wireguard_external_interface }} -j MASQUERADE
          PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o {{ wireguard_external_interface }} -j MASQUERADE

          {% for client in wireguard_clients %}
          # {{ client }}
          [Peer]
          PublicKey = {{ wg_keys['client_public_key_' + client] }}
          AllowedIPs = 10.8.0.{{ loop.index0 + 2 }}/32

          {% endfor %}
        owner: "root"
        group: "root"
        mode: "0600"

    - name: "Create WireGuard client config files"
      become: true
      ansible.builtin.copy:
        dest: "/etc/wireguard/wg0_client_{{ item }}.conf"
        content: |
          [Interface]
          Address = 10.8.0.{{ ansible_loop.index0 + 2 }}/24
          PrivateKey = {{ wg_keys['client_private_key_' + item] }}
          DNS = {{ pihole_addr }}

          [Peer]
          PublicKey = {{ wg_keys['server_public_key'] }}
          Endpoint = {{ wireguard_endpoint }}
          AllowedIPs = 0.0.0.0/0, ::/0
          PersistentKeepalive = 25
        owner: "root"
        group: "root"
        mode: "0600"
      loop: "{{ wireguard_clients }}"
      loop_control:
        extended: true

    - name: "Configure packet-forwarding"
      become: true
      ansible.builtin.copy:
        dest: "/etc/sysctl.conf"
        content: |
          net.ipv4.ip_forward=1
          net.ipv6.conf.all.forwarding=1
        owner: "root"
        group: "root"
        mode: "0600"

    - name: "Apply sysctl changes"
      become: true
      ansible.builtin.command:
        cmd: "sysctl -p"

    - name: "Enable WireGuard service"
      become: true
      ansible.builtin.systemd_service:
        name: "wg-quick@wg0"
        enabled: true
        daemon_reload: true
        state: "started"

    - name: "Save files containing WireGuard client QR codes"
      become: true
      ansible.builtin.shell:
        cmd: |
          mkdir -p /etc/wireguard/qr
          qrencode --type ANSIUTF8 --read /etc/wireguard/wg0_client_{{ item }}.conf > /etc/wireguard/qr/{{ item }}.qr
        creates: "/etc/wireguard/qr/{{ item }}.qr"
      loop: "{{ wireguard_clients }}"

    ################################################################################################
    ### Scheduled services #########################################################################
    ################################################################################################
    - name: "Add systemd service file for scheduled Playbook run"
      become: true
      ansible.builtin.copy:
        dest: "/etc/systemd/system/regular-maintenance.service"
        content: |
          [Unit]
          Description=Periodic maintenance tasks for home-stuff services
          Wants=regular-maintenance.timer

          [Service]
          ExecStart={{ src }}/config/scripts/regular-maintenance.sh
          Type=oneshot

          [Install]
          WantedBy=multi-user.target
        owner: "root"
        group: "root"
        mode: "0644"

    - name: "Add systemd service timer for scheduled Playbook run"
      become: true
      ansible.builtin.copy:
        dest: "/etc/systemd/system/regular-maintenance.timer"
        content: |
          [Unit]
          Description=Periodic maintenance tasks for home-stuff services

          [Timer]
          Unit=regular-maintenance.service
          OnBootSec=30s
          OnCalendar=Sun *-*-* 04:*:*
          AccuracySec=1s
          Persistent=true

          [Install]
          WantedBy=timers.target
        owner: "root"
        group: "root"
        mode: "0644"

    - name: "Enable systemd timer for scheduled Playbook run"
      become: true
      ansible.builtin.systemd_service:
        name: "regular-maintenance.timer"
        enabled: true
        daemon_reload: true
        state: "started"
